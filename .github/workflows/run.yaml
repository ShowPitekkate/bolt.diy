name: Public Dev Server

on: workflow_dispatch

jobs:
  expose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup and Build
        uses: ./.github/actions/setup-and-build

      - name: Start development server with debug
        run: |
          # Start server with explicit host and port
          nohup pnpm run dev --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
          
          # Debugging: Show server logs in realtime
          tail -f server.log &
          tail_pid=$!
          
          # Wait for server with timeout
          timeout 120 bash -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 2; echo "Waiting for server to start..."; done'
          curl_status=$?
          
          # Stop tail
          kill $tail_pid
          
          # Show final server logs
          cat server.log
          
          if [ $curl_status -ne 0 ]; then
            echo "::error::Server failed to start within 120 seconds"
            exit 1
          fi
      
      - name: Verify server process
        run: |
          if ! ps -p $(cat server.pid) > /dev/null; then
            echo "::error::Server process is not running"
            exit 1
          fi
      
      - name: Install Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
      
      - name: Authenticate Ngrok
        run: ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
      
      - name: Create Ngrok tunnel
        run: |
          ngrok http 3000 > /dev/null &
          sleep 5
          curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > url.txt
          echo "Public URL: $(cat url.txt)"
      
      - name: Set output
        id: ngrok-url
        run: echo "url=$(cat url.txt)" >> $GITHUB_OUTPUT
      
      - name: Display public URL
        run: echo "Your app is available at ${{ steps.ngrok-url.outputs.url }}"
      
      - name: Keep alive (60 minutes max)
        run: |
          for i in {1..60}; do
            sleep 60
            echo "Keeping alive... $i minutes passed"
          done
      
      - name: Cleanup processes
        if: always()
        run: |
          kill $(cat server.pid) 2>/dev/null || true
          pkill ngrok 2>/dev/null || true
